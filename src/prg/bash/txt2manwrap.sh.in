#! @bashlocation@
#########################################################################
#									#
# Script ID: txt2manwrap						#
# Author: Copyright (C) 2015-2019  Mark Grant				#
#									#
# Released under the GPLv3 only.					#
# SPDX-License-Identifier: GPL-3.0					#
#									#
# Purpose:								#
# Wrapper for txt2man to perform some string manipulation not possible	#
# in Makefile.am on parameters to be passed to txt2man.			#
#									#
# For example, ignoring subsequent parameters, a Makefile might invoke	#
# txt2manwrap with the makefile target which would become		#
# txt2manwrap -t mget.1 which txt2manwrap would convert to		#
# txt2man -t mget stripping the final '.*'.				#
#									#
# Syntax:	txt2manwrap MakefileTargetFileName \			#
#				ManualSectionNumber \			#
#				ManualVolumeName \			#
#				MakefileSourceTextFileFullName \	#
#				MakefileTargetManualFullFileName	#
#									#
# Exit Codes:	0 - success						#
#		1 - failure						#
#									#
#########################################################################

#########################################################################
#									#
# Changelog								#
#									#
# Date		Author	Version	Description				#
#									#
# 19/09/2015	MG	1.0.1	Created.				#
# 02/12/2017	MG	1.0.2	Add SPDX license tags to source files.	#
#				Adopt normal exit code policy; 0 on	#
#				success, 1 on failure.			#
# 13/04/2018	MG	1.0.3	Improve comments explaining process.	#
# 04/01/2019	MG	1.0.4	Use absolute bash path in shebang	#
#				instead of env. Using env is OK for a 	#
#				non-AutoTools script.			#
# 12/01/2019	MG	1.0.5	Do not hard code outputprefix contents.	#
#				Remove script_exit_code variable 	#
#				propogating the exit code as a function	#
#				argument instead.			#
#									#
#########################################################################

##################
# Init variables #
##################
outputprefix="$(basename $0):"
version="1.0.5"				# set version variable

#############
# Functions #
#############

# Standard function to emit messages depending on various parameters.
# Parameters -	$1 What:-	The message to emit.
#		$2 Where:-	stdout == 0
#				stderr == 1
# No return value.
output()
{
	if [ $2 = 0 ]; then
		printf "%s %s\n" $outputprefix "$1"
	else
		printf "%s %s\n" $outputprefix "$1" 1>&2
	fi
}

# Standard function to tidy up and return exit code.
# Parameters - 	$1 is the exit code.
# No return value.
script_exit()
{
	exit $1
}

# Standard trap exit function
trap_exit()
{
output "Script terminating due to trap received. Code: " 1
script_exit 1
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGTERM

########
# Main #
########

# ${var%Pattern} Remove from $var the shortest part of $Pattern that matches the
# back end of $var.
# So ignoring subsequent parameters, a Makefile might invoke txt2manwrap with
# the makefile target which would become txt2manwrap -t mget.1 which txt2manwrap
# would convert to txt2man -t mget stripping the final '.*'.
txt2man -t ${1%.*} -s $2 -v "$3" $4 > $5
txt2man_exit_code=$?

if [ $txt2man_exit_code = 0 ]
then
	output "Script completed successfully." 0
	script_exit 0
else
	output "txt2man failed with exit code: "$txt2man_exit_code 1
	script_exit 1
fi

script_exit 0

